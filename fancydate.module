<?php
/**
 * @file
 * Convert a timestamp into a nice date display.
 * This is mostly an API module at the moment, implement
 * THEMENAME_template_preprocess_node in your theme to override the display of the submission time.
 * TODO: field formatter needs more work
 */

/**
 * Implementation of hook_perm().
 */
function fancydate_perm() {
  return array(
    'administer fancydate',
  );
}
    
/**
 * Implementation of hook_menu().
 */
function fancydate_menu() {
  $items = array();
  $items['admin/settings/fancydate'] = array(
    'title' => 'Fancydate settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fancydate_settings_form'),
    'access arguments' => array('administer fancydate'),
  );
  return $items;
}

function fancydate_settings_form() {
  $form = array();
  $options = array(
    'day' => array(
      'd' => t('01 to 31'),
      'D' => t('Mon through Sun'),
      'j' => t('1 to 31'),
      'l' => t('Sunday through Saturday'),
      'N' => t('1 through 7'),
      'jS' => t('1st, 2nd, 3rd, 4th etc'),
      'w' => t('0 (Sunday) through 6'),
      'z' => t('0 through 365'),
    ),
    'month' => array(
      'F' => t('January through December'),
      'm' => t('01 through 12'),
      'M' => t('Jan through Dec'),
      'n' => t('1 through 12'),
    ),
    'year' => array(
      'Y' => t('1999 or 2003'),
      'y' => t('99 or 03'),
    ),
  );

  $form['fancydate'] = array(
    '#title' => t('Date display'),
    '#type' => 'fieldset',
    '#tree' => TRUE,
  );
  $form['fancydate']['day'] = array(
    '#title' => t('Day'),
    '#description' => t(''),
    '#type' => 'select',
    '#options' => $options['day'],
  );
  $form['fancydate']['month'] = array(
    '#title' => t('Month'),
    '#description' => t(''),
    '#type' => 'select',
    '#options' => $options['month'],
  );
  $form['fancydate']['year'] = array(
    '#title' => t('Year'),
    '#description' => t(''),
    '#type' => 'select',
    '#options' => $options['year'],
  );
  return system_settings_form($form);
}

function fancydate_form_alter(&$form, &$form_state, $form_id) {
  if ('node_type_form' == $form_id) {
    $type = $form['#node_type']->type;
    $form['fancydate'] = array(
      '#type' => 'fieldset',
      '#title' => t('Fancydate'),
      '#description' => t('Fancy date display'),
      '#collapsible' => TRUE,
    );

    $form['fancydate']['fancydate_submitted'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display the date as fancy format'),
      '#default_value' => variable_get('fancydate_submitted_' . $type, TRUE),
    );
  }
}

/**
 * Implementation of hook_content_extra_fields().
 */
function fancydate_content_extra_fields($type_name) {
  $options = array('query' => drupal_get_destination(), 'fragment' => 'fancydate');
  $link = l(t('Configure'), 'admin/content/node-type/' . $type_name, $options); 

  $extras = array();
  if (variable_get('fancydate_submitted_' . $type_name, TRUE)) {
    $extras['fancydate_submitted'] = array(
      'label' => t('Submitted on'),
      'description' => t('Timestamp for the node.'),
      'weight' => -5,
      'configure' => $link,
    );
  }
  return $extras;
}

/**
 * Implementation of hook_nodeapi().
 */
function fancydate_nodeapi(&$node, $op, $teaser, $page) {
  if ('view' == $op) {
    if (variable_get('fancydate_submitted_' . $node->type, TRUE)) {
      $weight = content_extra_field_weight($node->type, 'fancydate_submitted');
      $created = theme('fancydate_timestamp', $node->created);
      $node->content['fancydate_submitted'] = array(
        '#weight' => !empty($weight) ? $weight : -5,
        '#value' => theme('fancydate_timestamp', $node->created),
      );
    }
  }
}

/**
 * Implementation of hook_theme().
 */
function fancydate_theme() {
  return array(
    'fancydate_timestamp' => array(
      'arguments' => array('timestamp' => NULL),
      'template' => 'fancydate',
    ),
    'fancydate_string' => array(
      'arguments' => array('datestring' => NULL),
      'template' => 'fancydate',
    ),
    'fancydate_formatter_default' => array(
      'arguments' => array('element' => NULL),
      'function' => 'theme_fancydate_formatter_default',
    ),
  );
}

// TODO check programmatically if its an int perhaps or a string?
// Date fields output a string.

/**
 * Create a fancy date out of a timestamp.
 */
function template_preprocess_fancydate_timestamp(&$variables) {
  $variables = array_merge($variables, fancy_date($variables['timestamp']));
}

/**
 * Create a fancy date out of a time string.
 */
function template_preprocess_fancydate_string(&$variables) {
  $timestamp = strtotime($variables['datestring']);
  $variables = array_merge($variables, fancy_date($timestamp));
}

/**
 * Take an integer timestamp and break it down to day, month and year.
 */
function fancy_date($timestamp) {
  $day_format = variable_get('fancydate_day', 'j');
  $month_format = variable_get('fancydate_motnh', 'M');
  $year_format = variable_get('fancydate_year', 'Y');

  $date = array(
    'day' => format_date($timestamp, 'custom', $day_format),
    'month' => format_date($timestamp, 'custom', $month_format),
    'year' => format_date($timestamp, 'custom', $year_format),
  );
  return $date;
}

/**
  * Implementation of hook_field_formatter_info().
 */
function fancydate_field_formatter_info() {
  $formatters = array();
  $formatters['default'] = array(
    'label' => t('Fancydate'),
    'field types' => array('date', 'date_format', 'created', 'changed'),
  );
  return $formatters;
}

/**
 * Implementation of hook_field_formatter().
 */
function fancydate_field_formatter($field, $item, $formatter, $node) {
}

// TODO this is still not called.
function theme_fancydate_formatter_default($element) {
  dsm($element);
}
